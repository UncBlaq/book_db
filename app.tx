=> 

features
=> Migration is keeping track of Database changes
=> Making Migration and Applying Migration
=>  alembic revision --autogenerate -m "initial migration"

=> alembic revision --autogenerate -m "Added full_name to user_model"
=> Always review your migration
=> Ensuring consistencies in all stacks involved in production
=> Alembic table stores all the alembic versions
=> Avoid pushing migration file to git except you're the project manager



Create books
view books
update books 
delete books
1 :31
30
45
=> Token saved in the session that can expire

=> Database design is important for the capstone(Database Structure)
=> Enviroment variable management system(env, .env)=> .gitignore
=> Serialization, Migration, Contenalization  -- 
=> Authentication and Authorization
=> Oauth2(Authorized header), jwt(json web token)
=> os interfaces with the server, docker contenization mechanism
=> secret key, Hashing Algo, 
=> Whitlist of systems that can access the API

book - id , name , description, author

postgrs and mongo vector(Check on that)



class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True)
    email = Column(String, unique=True, index=True)
    hashed_password = Column(String)
    is_active = Column(Boolean, default=True)

    #magic Attributes(Gets the items that belongs to the particular user)
    items = relationship("Item", back_populates="owner")


class Item(Base):
    __tablename__ = "items"

    id = Column(Integer, primary_key=True)
    title = Column(String, index=True)
    description = Column(String, index=True)
    owner_id = Column(Integer, ForeignKey("users.id"))

    owner = relationship("User", back_populates="items")






pip show

=> yield are generators(yield on demand)
=> 50